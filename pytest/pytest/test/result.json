[{"keyword": "Feature", "uri": "features/bvl.feature", "name": "Battery Level", "id": "features/bvl.feature", "line": 1, "description": "Check that the sign's battery level assigned valid values.\nCheck that those values can be read back.\nCheck that invalid values are rejected.", "tags": [], "elements": [{"keyword": "Scenario", "id": "test_levels_can_be_read", "name": "Levels can be read", "line": 10, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "a communication session has been established", "line": 8, "match": {"location": ""}, "result": {"status": "passed", "duration": 1396717773}}, {"keyword": "When", "name": "the CMC sends \u00abBVL?\u00bb", "line": 11, "match": {"location": ""}, "result": {"status": "passed", "duration": 2868392}}]}, {"keyword": "Scenario", "id": "test_valid_levels_can_be_set[10.00-]", "name": "Valid levels can be set", "line": 16, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "a communication session has been established", "line": 8, "match": {"location": ""}, "result": {"status": "failed", "error_message": "request = <FixtureRequest for <Function test_valid_levels_can_be_set[10.00-]>>\n_pytest_bdd_example = {'level': '10.00', 'notes': ''}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n/home/dave/.local/lib/python3.10/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/home/dave/.local/lib/python3.10/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n/home/dave/.local/lib/python3.10/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n/home/dave/.local/lib/python3.10/site-packages/_pytest/fixtures.py:900: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsign_controller = <testbench.cmc_int.Adc object at 0x7f8188d4c250>\n\n    @when(\"a communication session has been established\")\n    @given(\"a communication session has been established\")\n    def step_establish_cmc_session(sign_controller):\n        if not sign_controller.is_session_active():\n            LOGGER.info('Sending trigger, then waiting for Sign Controller to make contact')\n            sign_controller.trigger()\n            return\n        LOGGER.info('CMC session already in progress')\n        resp = sign_controller.send('<STS?>')\n        if 'STS=' in resp:\n            return\n    \n>       assert False, \"FIXME we need to handle this\"\nE       AssertionError: FIXME we need to handle this\nE       assert False\n\nsteps/conftest.py:217: AssertionError", "duration": 887245559}}, {"keyword": "Given", "name": "10.00 is copied to \u03bc", "line": 17, "match": {"location": ""}, "result": {"status": "failed", "error_message": "", "duration": 2524}}, {"keyword": "When", "name": "the CMC sends \u00abBVL=\"\u03bc\"\u00bb", "line": 18, "match": {"location": ""}, "result": {"status": "failed", "error_message": "", "duration": 1323}}, {"keyword": "Then", "name": "the ADC responds with \u00abACK\u00bb", "line": 19, "match": {"location": ""}, "result": {"status": "failed", "error_message": "", "duration": 1136}}, {"keyword": "When", "name": "the CMC sends \u00abBVL?\u00bb", "line": 20, "match": {"location": ""}, "result": {"status": "failed", "error_message": "", "duration": 1034}}, {"keyword": "And", "name": "the ADC responds with \u00abBVL=\"\u03c4\"\u00bb", "line": 21, "match": {"location": ""}, "result": {"status": "failed", "error_message": "", "duration": 1075}}, {"keyword": "Then", "name": "\u03bc equals \u03c4", "line": 22, "match": {"location": ""}, "result": {"status": "failed", "error_message": "", "duration": 1102}}]}, {"keyword": "Scenario", "id": "test_valid_levels_can_be_set[12.00-]", "name": "Valid levels can be set", "line": 16, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "a communication session has been established", "line": 8, "match": {"location": ""}, "result": {"status": "passed", "duration": 110293331}}, {"keyword": "Given", "name": "12.00 is copied to \u03bc", "line": 17, "match": {"location": ""}, "result": {"status": "passed", "duration": 883405}}, {"keyword": "When", "name": "the CMC sends \u00abBVL=\"\u03bc\"\u00bb", "line": 18, "match": {"location": ""}, "result": {"status": "passed", "duration": 1502981}}, {"keyword": "Then", "name": "the ADC responds with \u00abACK\u00bb", "line": 19, "match": {"location": ""}, "result": {"status": "failed", "error_message": "request = <FixtureRequest for <Function test_valid_levels_can_be_set[12.00-]>>\n_pytest_bdd_example = {'level': '12.00', 'notes': ''}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n/home/dave/.local/lib/python3.10/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/home/dave/.local/lib/python3.10/site-packages/pytest_bdd/scenario.py:157: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n/home/dave/.local/lib/python3.10/site-packages/pytest_bdd/scenario.py:127: in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=step_func, request=request, kwargs=kwargs)\n/home/dave/.local/lib/python3.10/site-packages/_pytest/fixtures.py:900: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\nsteps/conftest_general_steps.py:138: in copy\n    results.check_format(f'<{expected}>', resp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <testbench.result_store.ResultStore object at 0x7f8188d4c820>, expected = '<ACK>', response = '<STS=\"0001\">'\n\n    def check_format(self, expected, response):\n        variables = self._get_variables(expected)\n        exp_re_text = re.escape(expected)\n        for var in variables:\n            exp_re_text = exp_re_text.replace(var, rf'(?P<{var}>[^\",]*)')\n        exp_re = re.compile(f'^{exp_re_text}$')\n        match = exp_re.match(response)\n>       assert match, f\"response '{response}' didn't match '{expected}' ('{exp_re_text}')\"\nE       AssertionError: response '<STS=\"0001\">' didn't match '<ACK>' ('<ACK>')\n\ntestbench/result_store.py:57: AssertionError", "duration": 1477032597}}, {"keyword": "When", "name": "the CMC sends \u00abBVL?\u00bb", "line": 20, "match": {"location": ""}, "result": {"status": "failed", "error_message": "", "duration": 2568}}, {"keyword": "And", "name": "the ADC responds with \u00abBVL=\"\u03c4\"\u00bb", "line": 21, "match": {"location": ""}, "result": {"status": "failed", "error_message": "", "duration": 1453}}, {"keyword": "Then", "name": "\u03bc equals \u03c4", "line": 22, "match": {"location": ""}, "result": {"status": "failed", "error_message": "", "duration": 1051}}]}]}]